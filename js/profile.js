// ‰∏™‰∫∫ËµÑÊñôÈ°µÈù¢ÂäüËÉΩ
class ProfileManager {
    constructor() {
        this.userProfile = this.loadProfile();
        this.achievements = this.loadAchievements();
        this.activities = this.loadActivities();
        this.init();
    }

    init() {
        this.bindEvents();
        this.updateProfileDisplay();
        this.renderAchievements();
        this.renderActivities();
        this.setupToggleSwitches();
    }

    // Âä†ËΩΩÁî®Êà∑ËµÑÊñô
    loadProfile() {
        const defaultProfile = {
            name: 'Âº†‰∏â',
            email: 'zhangsan@example.com',
            phone: '138****1234',
            birthday: '1995-06-15',
            occupation: 'ËΩØ‰ª∂Â∑•Á®ãÂ∏à',
            location: 'Âåó‰∫¨Â∏Ç',
            bio: 'ÁÉ≠Áà±ÁîüÊ¥ªÔºåËøΩÊ±ÇÈ´òÊïàÁöÑÊó∂Èó¥ÁÆ°ÁêÜÂíåÂÅ•Â∫∑ÁöÑÁîüÊ¥ªÊñπÂºè„ÄÇ',
            title: 'ÁîüÊ¥ªÁÆ°ÁêÜ‰∏ìÂÆ∂',
            avatar: null,
            preferences: {
                emailNotification: true,
                pushNotification: false,
                darkMode: false,
                autoBackup: true,
                dataAnalysis: true,
                privacyProtection: true
            }
        };

        return JSON.parse(localStorage.getItem('userProfile')) || defaultProfile;
    }

    // Âä†ËΩΩÊàêÂ∞±Êï∞ÊçÆ
    loadAchievements() {
        return [
            { icon: 'üèÉ‚Äç‚ôÇÔ∏è', title: 'ËøêÂä®Ëææ‰∫∫', desc: 'ËøûÁª≠ËøêÂä®30Â§©' },
            { icon: 'üìö', title: 'Â≠¶‰π†‰πãÊòü', desc: 'ÂÆåÊàê100Â∞èÊó∂Â≠¶‰π†' },
            { icon: 'üòä', title: 'Âø´‰πêÁîüÊ¥ª', desc: 'ËøûÁª≠ËÆ∞ÂΩïÂøÉÊÉÖ21Â§©' },
            { icon: '‚è∞', title: 'Êó∂Èó¥ÁÆ°ÁêÜ', desc: '‰∏ìÊ≥®Êó∂ÈïøË∂ÖËøá500Â∞èÊó∂' },
            { icon: 'üéØ', title: 'ÁõÆÊ†áËææÊàê', desc: 'ÂÆåÊàê10‰∏™ÈïøÊúüÁõÆÊ†á' },
            { icon: 'üåü', title: 'ÂÖ®Èù¢ÂèëÂ±ï', desc: 'ÂêÑÈ°πËÉΩÂäõÂùáË°°ÊèêÂçá' }
        ];
    }

    // Âä†ËΩΩÊ¥ªÂä®ËÆ∞ÂΩï
    loadActivities() {
        return [
            { icon: '‚úÖ', text: 'ÂÆåÊàê‰∫ÜÊô®ÁªÉ‰π†ÊÉØ', time: '2Â∞èÊó∂Ââç', type: 'habit' },
            { icon: 'üòä', text: 'ËÆ∞ÂΩï‰∫Ü‰ªäÊó•ÂøÉÊÉÖ', time: '3Â∞èÊó∂Ââç', type: 'mood' },
            { icon: '‚è∞', text: 'ÂÆåÊàê‰∫Ü2Â∞èÊó∂‰∏ìÊ≥®Â∑•‰Ωú', time: '5Â∞èÊó∂Ââç', type: 'focus' },
            { icon: 'üèÜ', text: 'Ëé∑Âæó‰∫Ü"ËøûÁª≠ËÆ∞ÂΩï"ÊàêÂ∞±', time: 'Êò®Â§©', type: 'achievement' },
            { icon: 'üìö', text: 'ÂÆåÊàê‰∫ÜÊÉÖÁª™ËÆ≠ÁªÉËØæÁ®ã', time: 'Êò®Â§©', type: 'training' },
            { icon: 'üìù', text: 'Êõ¥Êñ∞‰∫Ü‰∏™‰∫∫ÁõÆÊ†á', time: '2Â§©Ââç', type: 'goal' },
            { icon: 'üéØ', text: 'ËææÊàê‰∫ÜÊúàÂ∫¶ÁõÆÊ†á', time: '3Â§©Ââç', type: 'goal' },
            { icon: 'üí≠', text: 'ÂÜô‰∫Ü‰∏ÄÁØáÂèçÊÄùÊó•ËÆ∞', time: '3Â§©Ââç', type: 'reflection' }
        ];
    }

    // ÁªëÂÆö‰∫ã‰ª∂
    bindEvents() {
        // Ë°®ÂçïÊèê‰∫§
        document.getElementById('profileForm')?.addEventListener('submit', (e) => {
            e.preventDefault();
            this.saveProfile();
        });

        // Â§¥ÂÉè‰∏ä‰º†
        document.getElementById('avatarInput')?.addEventListener('change', (e) => {
            this.handleAvatarUpload(e);
        });

        // Âø´ÈÄüÊìç‰ΩúÊåâÈíÆ
        this.bindQuickActions();
    }

    // ÁªëÂÆöÂø´ÈÄüÊìç‰Ωú
    bindQuickActions() {
        // Ëøô‰∫õÂáΩÊï∞‰ºöÂú®HTML‰∏≠Áõ¥Êé•Ë∞ÉÁî®
        window.uploadAvatar = () => {
            document.getElementById('avatarInput')?.click();
        };

        window.exportData = () => {
            this.exportUserData();
        };

        window.backupData = () => {
            this.backupUserData();
        };
    }

    // Êõ¥Êñ∞ËµÑÊñôÊòæÁ§∫
    updateProfileDisplay() {
        // Êõ¥Êñ∞Â§¥ÈÉ®‰ø°ÊÅØ
        document.getElementById('userName').textContent = this.userProfile.name;
        document.getElementById('userTitle').textContent = this.userProfile.title;

        // Êõ¥Êñ∞ÁªüËÆ°Êï∞ÊçÆ
        this.updateStats();

        // Â°´ÂÖÖË°®Âçï
        this.fillForm();
    }

    // Êõ¥Êñ∞ÁªüËÆ°Êï∞ÊçÆ
    updateStats() {
        // ËÆ°ÁÆó‰ΩøÁî®Â§©Êï∞
        const startDate = new Date('2024-01-01');
        const today = new Date();
        const totalDays = Math.floor((today - startDate) / (1000 * 60 * 60 * 24));

        // ‰ªéÂêÑÊ®°ÂùóËé∑ÂèñÁªüËÆ°Êï∞ÊçÆ
        const habits = JSON.parse(localStorage.getItem('habits')) || [];
        const moodEntries = JSON.parse(localStorage.getItem('moodEntries')) || [];
        const achievements = this.achievements;

        // Êõ¥Êñ∞ÊòæÁ§∫
        document.getElementById('totalDays').textContent = totalDays;
        document.getElementById('totalHabits').textContent = habits.length;
        document.getElementById('achievementCount').textContent = achievements.length;
        document.getElementById('moodEntries').textContent = moodEntries.length;
    }

    // Â°´ÂÖÖË°®Âçï
    fillForm() {
        const profile = this.userProfile;
        document.getElementById('displayName').value = profile.name;
        document.getElementById('email').value = profile.email;
        document.getElementById('phone').value = profile.phone;
        document.getElementById('birthday').value = profile.birthday;
        document.getElementById('occupation').value = profile.occupation;
        document.getElementById('location').value = profile.location;
        document.getElementById('bio').value = profile.bio;
    }

    // ËÆæÁΩÆÂàáÊç¢ÂºÄÂÖ≥
    setupToggleSwitches() {
        document.querySelectorAll('.toggle-switch').forEach(toggle => {
            const setting = toggle.dataset.setting;
            const isActive = this.userProfile.preferences[setting];

            if (isActive) {
                toggle.classList.add('active');
            }

            toggle.addEventListener('click', () => {
                toggle.classList.toggle('active');
                this.userProfile.preferences[setting] = toggle.classList.contains('active');
                this.saveProfile();
            });
        });
    }

    // Â§ÑÁêÜÂ§¥ÂÉè‰∏ä‰º†
    handleAvatarUpload(event) {
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = (e) => {
                const avatarImg = document.getElementById('userAvatar');
                avatarImg.src = e.target.result;
                this.userProfile.avatar = e.target.result;
                this.saveProfile();
                this.showNotification('Â§¥ÂÉè‰∏ä‰º†ÊàêÂäüÔºÅ', 'success');
            };
            reader.readAsDataURL(file);
        }
    }

    // ‰øùÂ≠òËµÑÊñô
    saveProfile() {
        // Ëé∑ÂèñË°®ÂçïÊï∞ÊçÆ
        this.userProfile.name = document.getElementById('displayName').value;
        this.userProfile.email = document.getElementById('email').value;
        this.userProfile.phone = document.getElementById('phone').value;
        this.userProfile.birthday = document.getElementById('birthday').value;
        this.userProfile.occupation = document.getElementById('occupation').value;
        this.userProfile.location = document.getElementById('location').value;
        this.userProfile.bio = document.getElementById('bio').value;

        // ‰øùÂ≠òÂà∞Êú¨Âú∞Â≠òÂÇ®
        localStorage.setItem('userProfile', JSON.stringify(this.userProfile));

        // Êõ¥Êñ∞ÊòæÁ§∫
        this.updateProfileDisplay();

        // ÊòæÁ§∫ÊàêÂäüÊ∂àÊÅØ
        this.showNotification('‰∏™‰∫∫ËµÑÊñôÂ∑≤‰øùÂ≠òÔºÅ', 'success');
    }

    // Ê∏≤ÊüìÊàêÂ∞±
    renderAchievements() {
        const container = document.getElementById('achievementsContainer');
        if (!container) return;

        container.innerHTML = this.achievements.map(achievement => `
            <div class="achievement-item">
                <div class="achievement-icon">${achievement.icon}</div>
                <div class="achievement-title">${achievement.title}</div>
                <div class="achievement-desc">${achievement.desc}</div>
            </div>
        `).join('');
    }

    // Ê∏≤ÊüìÊ¥ªÂä®ËÆ∞ÂΩï
    renderActivities() {
        const container = document.getElementById('activityFeed');
        if (!container) return;

        container.innerHTML = this.activities.map(activity => `
            <div class="activity-item">
                <div class="activity-icon" style="background: ${this.getActivityColor(activity.type)};">
                    ${activity.icon}
                </div>
                <div class="activity-content">
                    <div class="activity-text">${activity.text}</div>
                    <div class="activity-time">${activity.time}</div>
                </div>
            </div>
        `).join('');
    }

    // Ëé∑ÂèñÊ¥ªÂä®È¢úËâ≤
    getActivityColor(type) {
        const colors = {
            habit: '#00b894',
            mood: '#fd79a8',
            focus: '#667eea',
            achievement: '#fdcb6e',
            training: '#a29bfe',
            goal: '#00cec9',
            reflection: '#74b9ff'
        };
        return colors[type] || '#666';
    }

    // ÂØºÂá∫Áî®Êà∑Êï∞ÊçÆ
    exportUserData() {
        const userData = {
            profile: this.userProfile,
            habits: JSON.parse(localStorage.getItem('habits')) || [],
            moodEntries: JSON.parse(localStorage.getItem('moodEntries')) || [],
            focusHistory: JSON.parse(localStorage.getItem('focusHistory')) || [],
            achievements: this.achievements,
            trainingProgress: JSON.parse(localStorage.getItem('trainingProgress')) || {},
            exportDate: new Date().toISOString()
        };

        const blob = new Blob([JSON.stringify(userData, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = `lifesync_data_${new Date().toISOString().split('T')[0]}.json`;
        link.click();

        this.showNotification('Êï∞ÊçÆÂØºÂá∫ÊàêÂäüÔºÅ', 'success');
    }

    // Â§á‰ªΩÁî®Êà∑Êï∞ÊçÆ
    backupUserData() {
        const backupData = {
            profile: this.userProfile,
            habits: JSON.parse(localStorage.getItem('habits')) || [],
            moodEntries: JSON.parse(localStorage.getItem('moodEntries')) || [],
            settings: JSON.parse(localStorage.getItem('settings')) || {},
            backupDate: new Date().toISOString()
        };

        localStorage.setItem('backup_' + Date.now(), JSON.stringify(backupData));
        this.showNotification('Êï∞ÊçÆÂ§á‰ªΩÂÆåÊàêÔºÅ', 'success');
    }

    // ÊòæÁ§∫ÈÄöÁü•
    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: ${type === 'success' ? '#00b894' : '#74b9ff'};
            color: white;
            padding: 1rem 1.5rem;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            z-index: 1000;
            animation: slideIn 0.3s ease;
        `;
        notification.textContent = message;

        document.body.appendChild(notification);

        setTimeout(() => {
            notification.style.animation = 'slideOut 0.3s ease';
            setTimeout(() => {
                if (document.body.contains(notification)) {
                    document.body.removeChild(notification);
                }
            }, 300);
        }, 3000);
    }

    // Ëé∑ÂèñÁî®Êà∑ËµÑÊñô
    getProfile() {
        return this.userProfile;
    }

    // Êõ¥Êñ∞ËµÑÊñô
    updateProfile(updates) {
        Object.assign(this.userProfile, updates);
        this.saveProfile();
    }
}

// È°µÈù¢Âä†ËΩΩÂÆåÊàêÂêéÂàùÂßãÂåñ
document.addEventListener('DOMContentLoaded', () => {
    window.profileManager = new ProfileManager();
});

// Ê∑ªÂä†CSSÂä®Áîª
const style = document.createElement('style');
style.textContent = `
    @keyframes slideIn {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
    }
    
    @keyframes slideOut {
        from { transform: translateX(0); opacity: 1; }
        to { transform: translateX(100%); opacity: 0; }
    }
`;
document.head.appendChild(style); 